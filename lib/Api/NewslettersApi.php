<?php
/**
 * AskNews API
 *
 * AskNews API
 *
 * The version of the OpenAPI document: 0.22.8
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */


namespace AskNews\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AskNews\AccessToken;
use AskNews\ApiException;
use AskNews\Configuration;
use AskNews\HeaderSelector;
use AskNews\ObjectSerializer;

/**
 * NewslettersApi Class Doc Comment
 *
 * @category Class
 * @package  AskNews
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewslettersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteNewsletter' => [
            'application/json',
        ],
        'deleteNewsletterContact' => [
            'application/json',
        ],
        'getNewsletter' => [
            'application/json',
        ],
        'getNewsletterContact' => [
            'application/json',
        ],
        'getNewsletterContacts' => [
            'application/json',
        ],
        'getNewsletters' => [
            'application/json',
        ],
        'getPublicNewsletters' => [
            'application/json',
        ],
        'patchNewsletterContact' => [
            'application/json',
        ],
        'postNewsletter' => [
            'application/json',
        ],
        'postNewsletterContacts' => [
            'application/json',
        ],
        'putNewsletter' => [
            'application/json',
        ],
        'unsubscribeNewsletter' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteNewsletter
     *
     * Delete a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNewsletter($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        $this->deleteNewsletterWithHttpInfo($newsletter_id, $contentType);
    }

    /**
     * Operation deleteNewsletterWithHttpInfo
     *
     * Delete a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        $request = $this->deleteNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNewsletterAsync
     *
     * Delete a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        return $this->deleteNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNewsletterAsyncWithHttpInfo
     *
     * Delete a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        $returnType = '';
        $request = $this->deleteNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNewsletter'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling deleteNewsletter'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNewsletterContact
     *
     * Delete a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletterContact'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNewsletterContact($newsletter_id, $contact_id, string $contentType = self::contentTypes['deleteNewsletterContact'][0])
    {
        $this->deleteNewsletterContactWithHttpInfo($newsletter_id, $contact_id, $contentType);
    }

    /**
     * Operation deleteNewsletterContactWithHttpInfo
     *
     * Delete a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletterContact'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNewsletterContactWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['deleteNewsletterContact'][0])
    {
        $request = $this->deleteNewsletterContactRequest($newsletter_id, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNewsletterContactAsync
     *
     * Delete a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNewsletterContactAsync($newsletter_id, $contact_id, string $contentType = self::contentTypes['deleteNewsletterContact'][0])
    {
        return $this->deleteNewsletterContactAsyncWithHttpInfo($newsletter_id, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNewsletterContactAsyncWithHttpInfo
     *
     * Delete a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNewsletterContactAsyncWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['deleteNewsletterContact'][0])
    {
        $returnType = '';
        $request = $this->deleteNewsletterContactRequest($newsletter_id, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNewsletterContact'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNewsletterContactRequest($newsletter_id, $contact_id, string $contentType = self::contentTypes['deleteNewsletterContact'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling deleteNewsletterContact'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling deleteNewsletterContact'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}/contacts/{contact_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contact_id' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNewsletter
     *
     * Get a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterResponse|\AskNews\Model\HTTPValidationError
     */
    public function getNewsletter($newsletter_id, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        list($response) = $this->getNewsletterWithHttpInfo($newsletter_id, $contentType);
        return $response;
    }

    /**
     * Operation getNewsletterWithHttpInfo
     *
     * Get a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        $request = $this->getNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\NewsletterResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewsletterAsync
     *
     * Get a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        return $this->getNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewsletterAsyncWithHttpInfo
     *
     * Get a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        $returnType = '\AskNews\Model\NewsletterResponse';
        $request = $this->getNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNewsletter'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['getNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling getNewsletter'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNewsletterContact
     *
     * Get a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContact'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterContactResponse|\AskNews\Model\HTTPValidationError
     */
    public function getNewsletterContact($newsletter_id, $contact_id, string $contentType = self::contentTypes['getNewsletterContact'][0])
    {
        list($response) = $this->getNewsletterContactWithHttpInfo($newsletter_id, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation getNewsletterContactWithHttpInfo
     *
     * Get a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContact'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterContactResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewsletterContactWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['getNewsletterContact'][0])
    {
        $request = $this->getNewsletterContactRequest($newsletter_id, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\NewsletterContactResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterContactResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterContactResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterContactResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterContactResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewsletterContactAsync
     *
     * Get a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterContactAsync($newsletter_id, $contact_id, string $contentType = self::contentTypes['getNewsletterContact'][0])
    {
        return $this->getNewsletterContactAsyncWithHttpInfo($newsletter_id, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewsletterContactAsyncWithHttpInfo
     *
     * Get a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterContactAsyncWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['getNewsletterContact'][0])
    {
        $returnType = '\AskNews\Model\NewsletterContactResponse';
        $request = $this->getNewsletterContactRequest($newsletter_id, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNewsletterContact'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewsletterContactRequest($newsletter_id, $contact_id, string $contentType = self::contentTypes['getNewsletterContact'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling getNewsletterContact'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling getNewsletterContact'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}/contacts/{contact_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contact_id' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNewsletterContacts
     *
     * Get newsletter contacts
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterContactResponse[]|\AskNews\Model\HTTPValidationError
     */
    public function getNewsletterContacts($newsletter_id, string $contentType = self::contentTypes['getNewsletterContacts'][0])
    {
        list($response) = $this->getNewsletterContactsWithHttpInfo($newsletter_id, $contentType);
        return $response;
    }

    /**
     * Operation getNewsletterContactsWithHttpInfo
     *
     * Get newsletter contacts
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterContactResponse[]|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewsletterContactsWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['getNewsletterContacts'][0])
    {
        $request = $this->getNewsletterContactsRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\NewsletterContactResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterContactResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterContactResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterContactResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterContactResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewsletterContactsAsync
     *
     * Get newsletter contacts
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterContactsAsync($newsletter_id, string $contentType = self::contentTypes['getNewsletterContacts'][0])
    {
        return $this->getNewsletterContactsAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewsletterContactsAsyncWithHttpInfo
     *
     * Get newsletter contacts
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterContactsAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['getNewsletterContacts'][0])
    {
        $returnType = '\AskNews\Model\NewsletterContactResponse[]';
        $request = $this->getNewsletterContactsRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNewsletterContacts'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewsletterContactsRequest($newsletter_id, string $contentType = self::contentTypes['getNewsletterContacts'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling getNewsletterContacts'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNewsletters
     *
     * Get all created newsletters
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\PaginatedResponseNewsletterResponse|\AskNews\Model\HTTPValidationError
     */
    public function getNewsletters(string $contentType = self::contentTypes['getNewsletters'][0])
    {
        list($response) = $this->getNewslettersWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getNewslettersWithHttpInfo
     *
     * Get all created newsletters
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\PaginatedResponseNewsletterResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewslettersWithHttpInfo(string $contentType = self::contentTypes['getNewsletters'][0])
    {
        $request = $this->getNewslettersRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\PaginatedResponseNewsletterResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\PaginatedResponseNewsletterResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\PaginatedResponseNewsletterResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\PaginatedResponseNewsletterResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\PaginatedResponseNewsletterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewslettersAsync
     *
     * Get all created newsletters
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewslettersAsync(string $contentType = self::contentTypes['getNewsletters'][0])
    {
        return $this->getNewslettersAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewslettersAsyncWithHttpInfo
     *
     * Get all created newsletters
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewslettersAsyncWithHttpInfo(string $contentType = self::contentTypes['getNewsletters'][0])
    {
        $returnType = '\AskNews\Model\PaginatedResponseNewsletterResponse';
        $request = $this->getNewslettersRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNewsletters'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewslettersRequest(string $contentType = self::contentTypes['getNewsletters'][0])
    {


        $resourcePath = '/v1/chat/newsletters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPublicNewsletters
     *
     * Get all public newsletters
     *
     * @param  int $page The page number to get (optional, default to 1)
     * @param  int $per_page The number of items per page (optional, default to 10)
     * @param  bool $all Whether to get all the public newsletters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicNewsletters'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\PaginatedResponseNewsletterPublicResponse|\AskNews\Model\HTTPValidationError
     */
    public function getPublicNewsletters($page = 1, $per_page = 10, $all = false, string $contentType = self::contentTypes['getPublicNewsletters'][0])
    {
        list($response) = $this->getPublicNewslettersWithHttpInfo($page, $per_page, $all, $contentType);
        return $response;
    }

    /**
     * Operation getPublicNewslettersWithHttpInfo
     *
     * Get all public newsletters
     *
     * @param  int $page The page number to get (optional, default to 1)
     * @param  int $per_page The number of items per page (optional, default to 10)
     * @param  bool $all Whether to get all the public newsletters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicNewsletters'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\PaginatedResponseNewsletterPublicResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPublicNewslettersWithHttpInfo($page = 1, $per_page = 10, $all = false, string $contentType = self::contentTypes['getPublicNewsletters'][0])
    {
        $request = $this->getPublicNewslettersRequest($page, $per_page, $all, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\PaginatedResponseNewsletterPublicResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\PaginatedResponseNewsletterPublicResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\PaginatedResponseNewsletterPublicResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\PaginatedResponseNewsletterPublicResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\PaginatedResponseNewsletterPublicResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPublicNewslettersAsync
     *
     * Get all public newsletters
     *
     * @param  int $page The page number to get (optional, default to 1)
     * @param  int $per_page The number of items per page (optional, default to 10)
     * @param  bool $all Whether to get all the public newsletters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPublicNewslettersAsync($page = 1, $per_page = 10, $all = false, string $contentType = self::contentTypes['getPublicNewsletters'][0])
    {
        return $this->getPublicNewslettersAsyncWithHttpInfo($page, $per_page, $all, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPublicNewslettersAsyncWithHttpInfo
     *
     * Get all public newsletters
     *
     * @param  int $page The page number to get (optional, default to 1)
     * @param  int $per_page The number of items per page (optional, default to 10)
     * @param  bool $all Whether to get all the public newsletters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPublicNewslettersAsyncWithHttpInfo($page = 1, $per_page = 10, $all = false, string $contentType = self::contentTypes['getPublicNewsletters'][0])
    {
        $returnType = '\AskNews\Model\PaginatedResponseNewsletterPublicResponse';
        $request = $this->getPublicNewslettersRequest($page, $per_page, $all, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPublicNewsletters'
     *
     * @param  int $page The page number to get (optional, default to 1)
     * @param  int $per_page The number of items per page (optional, default to 10)
     * @param  bool $all Whether to get all the public newsletters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPublicNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPublicNewslettersRequest($page = 1, $per_page = 10, $all = false, string $contentType = self::contentTypes['getPublicNewsletters'][0])
    {





        $resourcePath = '/v1/chat/newsletters/public';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $all,
            'all', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchNewsletterContact
     *
     * Update a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchNewsletterContact'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterContactUpdateResponse|\AskNews\Model\HTTPValidationError
     */
    public function patchNewsletterContact($newsletter_id, $contact_id, $newsletter_contact_request, string $contentType = self::contentTypes['patchNewsletterContact'][0])
    {
        list($response) = $this->patchNewsletterContactWithHttpInfo($newsletter_id, $contact_id, $newsletter_contact_request, $contentType);
        return $response;
    }

    /**
     * Operation patchNewsletterContactWithHttpInfo
     *
     * Update a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchNewsletterContact'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterContactUpdateResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchNewsletterContactWithHttpInfo($newsletter_id, $contact_id, $newsletter_contact_request, string $contentType = self::contentTypes['patchNewsletterContact'][0])
    {
        $request = $this->patchNewsletterContactRequest($newsletter_id, $contact_id, $newsletter_contact_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\NewsletterContactUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterContactUpdateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterContactUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterContactUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterContactUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchNewsletterContactAsync
     *
     * Update a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchNewsletterContactAsync($newsletter_id, $contact_id, $newsletter_contact_request, string $contentType = self::contentTypes['patchNewsletterContact'][0])
    {
        return $this->patchNewsletterContactAsyncWithHttpInfo($newsletter_id, $contact_id, $newsletter_contact_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchNewsletterContactAsyncWithHttpInfo
     *
     * Update a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchNewsletterContactAsyncWithHttpInfo($newsletter_id, $contact_id, $newsletter_contact_request, string $contentType = self::contentTypes['patchNewsletterContact'][0])
    {
        $returnType = '\AskNews\Model\NewsletterContactUpdateResponse';
        $request = $this->patchNewsletterContactRequest($newsletter_id, $contact_id, $newsletter_contact_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchNewsletterContact'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contact_id The contact ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchNewsletterContact'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchNewsletterContactRequest($newsletter_id, $contact_id, $newsletter_contact_request, string $contentType = self::contentTypes['patchNewsletterContact'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling patchNewsletterContact'
            );
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling patchNewsletterContact'
            );
        }

        // verify the required parameter 'newsletter_contact_request' is set
        if ($newsletter_contact_request === null || (is_array($newsletter_contact_request) && count($newsletter_contact_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_contact_request when calling patchNewsletterContact'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}/contacts/{contact_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contact_id' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newsletter_contact_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newsletter_contact_request));
            } else {
                $httpBody = $newsletter_contact_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNewsletter
     *
     * Create a newsletter
     *
     * @param  \AskNews\Model\CreateNewsletterRequest $create_newsletter_request create_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterResponse|\AskNews\Model\HTTPValidationError
     */
    public function postNewsletter($create_newsletter_request, string $contentType = self::contentTypes['postNewsletter'][0])
    {
        list($response) = $this->postNewsletterWithHttpInfo($create_newsletter_request, $contentType);
        return $response;
    }

    /**
     * Operation postNewsletterWithHttpInfo
     *
     * Create a newsletter
     *
     * @param  \AskNews\Model\CreateNewsletterRequest $create_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNewsletterWithHttpInfo($create_newsletter_request, string $contentType = self::contentTypes['postNewsletter'][0])
    {
        $request = $this->postNewsletterRequest($create_newsletter_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AskNews\Model\NewsletterResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postNewsletterAsync
     *
     * Create a newsletter
     *
     * @param  \AskNews\Model\CreateNewsletterRequest $create_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNewsletterAsync($create_newsletter_request, string $contentType = self::contentTypes['postNewsletter'][0])
    {
        return $this->postNewsletterAsyncWithHttpInfo($create_newsletter_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNewsletterAsyncWithHttpInfo
     *
     * Create a newsletter
     *
     * @param  \AskNews\Model\CreateNewsletterRequest $create_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNewsletterAsyncWithHttpInfo($create_newsletter_request, string $contentType = self::contentTypes['postNewsletter'][0])
    {
        $returnType = '\AskNews\Model\NewsletterResponse';
        $request = $this->postNewsletterRequest($create_newsletter_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNewsletter'
     *
     * @param  \AskNews\Model\CreateNewsletterRequest $create_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postNewsletterRequest($create_newsletter_request, string $contentType = self::contentTypes['postNewsletter'][0])
    {

        // verify the required parameter 'create_newsletter_request' is set
        if ($create_newsletter_request === null || (is_array($create_newsletter_request) && count($create_newsletter_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_newsletter_request when calling postNewsletter'
            );
        }


        $resourcePath = '/v1/chat/newsletters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_newsletter_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_newsletter_request));
            } else {
                $httpBody = $create_newsletter_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postNewsletterContacts
     *
     * Create a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterContactCreateResponse|\AskNews\Model\HTTPValidationError
     */
    public function postNewsletterContacts($newsletter_id, $newsletter_contact_request, string $contentType = self::contentTypes['postNewsletterContacts'][0])
    {
        list($response) = $this->postNewsletterContactsWithHttpInfo($newsletter_id, $newsletter_contact_request, $contentType);
        return $response;
    }

    /**
     * Operation postNewsletterContactsWithHttpInfo
     *
     * Create a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterContactCreateResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postNewsletterContactsWithHttpInfo($newsletter_id, $newsletter_contact_request, string $contentType = self::contentTypes['postNewsletterContacts'][0])
    {
        $request = $this->postNewsletterContactsRequest($newsletter_id, $newsletter_contact_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\AskNews\Model\NewsletterContactCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterContactCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterContactCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterContactCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterContactCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postNewsletterContactsAsync
     *
     * Create a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNewsletterContactsAsync($newsletter_id, $newsletter_contact_request, string $contentType = self::contentTypes['postNewsletterContacts'][0])
    {
        return $this->postNewsletterContactsAsyncWithHttpInfo($newsletter_id, $newsletter_contact_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postNewsletterContactsAsyncWithHttpInfo
     *
     * Create a newsletter contact
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postNewsletterContactsAsyncWithHttpInfo($newsletter_id, $newsletter_contact_request, string $contentType = self::contentTypes['postNewsletterContacts'][0])
    {
        $returnType = '\AskNews\Model\NewsletterContactCreateResponse';
        $request = $this->postNewsletterContactsRequest($newsletter_id, $newsletter_contact_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postNewsletterContacts'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\NewsletterContactRequest $newsletter_contact_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postNewsletterContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postNewsletterContactsRequest($newsletter_id, $newsletter_contact_request, string $contentType = self::contentTypes['postNewsletterContacts'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling postNewsletterContacts'
            );
        }

        // verify the required parameter 'newsletter_contact_request' is set
        if ($newsletter_contact_request === null || (is_array($newsletter_contact_request) && count($newsletter_contact_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_contact_request when calling postNewsletterContacts'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($newsletter_contact_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($newsletter_contact_request));
            } else {
                $httpBody = $newsletter_contact_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putNewsletter
     *
     * Update a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\UpdateNewsletterRequest $update_newsletter_request update_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\NewsletterResponse|\AskNews\Model\HTTPValidationError
     */
    public function putNewsletter($newsletter_id, $update_newsletter_request, string $contentType = self::contentTypes['putNewsletter'][0])
    {
        list($response) = $this->putNewsletterWithHttpInfo($newsletter_id, $update_newsletter_request, $contentType);
        return $response;
    }

    /**
     * Operation putNewsletterWithHttpInfo
     *
     * Update a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\UpdateNewsletterRequest $update_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\NewsletterResponse|\AskNews\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function putNewsletterWithHttpInfo($newsletter_id, $update_newsletter_request, string $contentType = self::contentTypes['putNewsletter'][0])
    {
        $request = $this->putNewsletterRequest($newsletter_id, $update_newsletter_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\NewsletterResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\NewsletterResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\NewsletterResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\NewsletterResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\NewsletterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putNewsletterAsync
     *
     * Update a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\UpdateNewsletterRequest $update_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNewsletterAsync($newsletter_id, $update_newsletter_request, string $contentType = self::contentTypes['putNewsletter'][0])
    {
        return $this->putNewsletterAsyncWithHttpInfo($newsletter_id, $update_newsletter_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putNewsletterAsyncWithHttpInfo
     *
     * Update a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\UpdateNewsletterRequest $update_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putNewsletterAsyncWithHttpInfo($newsletter_id, $update_newsletter_request, string $contentType = self::contentTypes['putNewsletter'][0])
    {
        $returnType = '\AskNews\Model\NewsletterResponse';
        $request = $this->putNewsletterRequest($newsletter_id, $update_newsletter_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putNewsletter'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  \AskNews\Model\UpdateNewsletterRequest $update_newsletter_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putNewsletterRequest($newsletter_id, $update_newsletter_request, string $contentType = self::contentTypes['putNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling putNewsletter'
            );
        }

        // verify the required parameter 'update_newsletter_request' is set
        if ($update_newsletter_request === null || (is_array($update_newsletter_request) && count($update_newsletter_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_newsletter_request when calling putNewsletter'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_newsletter_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_newsletter_request));
            } else {
                $httpBody = $update_newsletter_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unsubscribeNewsletter
     *
     * Unsubscribe from a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unsubscribeNewsletter($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        $this->unsubscribeNewsletterWithHttpInfo($newsletter_id, $contentType);
    }

    /**
     * Operation unsubscribeNewsletterWithHttpInfo
     *
     * Unsubscribe from a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unsubscribeNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        $request = $this->unsubscribeNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unsubscribeNewsletterAsync
     *
     * Unsubscribe from a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        return $this->unsubscribeNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unsubscribeNewsletterAsyncWithHttpInfo
     *
     * Unsubscribe from a newsletter
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        $returnType = '';
        $request = $this->unsubscribeNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unsubscribeNewsletter'
     *
     * @param  string $newsletter_id The newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unsubscribeNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling unsubscribeNewsletter'
            );
        }


        $resourcePath = '/v1/chat/newsletters/{newsletter_id}/unsubscribe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

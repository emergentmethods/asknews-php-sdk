<?php
/**
 * AskNews API
 *
 * AskNews API
 *
 * The version of the OpenAPI document: 0.22.10
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */


namespace AskNews\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AskNews\AccessToken;
use AskNews\ApiException;
use AskNews\Configuration;
use AskNews\HeaderSelector;
use AskNews\ObjectSerializer;

/**
 * WikiApi Class Doc Comment
 *
 * @category Class
 * @package  AskNews
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WikiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchWiki' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchWiki
     *
     * Search for Wikipedia context with natural language
     *
     * @param  string $query Natural language query that can be any phrase, keyword, question, or paragraph. (optional, default to '')
     * @param  int $neighbor_chunks Number of neighbor chunks to attach and return. If 0, then no neighbor chunks will be returned. (optional)
     * @param  int $n_documents Number of documents to return. If 0, then no documents will be returned. (optional)
     * @param  bool $full_articles If true, then full articles will be returned. If false, then only chunks and their neighbors will be returned. Beware that returning full articles increases data size which increases token usage downstream. (optional)
     * @param  bool $hybrid_search If true, then hybrid search will be used. If false, then only vector search will be used. (optional)
     * @param  string[] $string_guarantee List of strings that must be present in the results. If empty, then no string guarantee will be applied. (optional)
     * @param  float $diversify Diversity factor for MMR re-ranking. 0.0 means no diversity (pure relevance), 1.0 means full diversity. (optional)
     * @param  bool $include_main_section If true, then the main section of the article will be included at the start of each chunk&#39;s content. If false, then only the chunk content will be returned. Useful because the main section often contains important context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchWiki'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AskNews\Model\WikiSearchResponse|\AskNews\Model\ValidationErrorModel|\AskNews\Model\AbcAPIErrorModel89|\AskNews\Model\AbcAPIErrorModel90|\AskNews\Model\AbcAPIErrorModel91|\AskNews\Model\AbcAPIErrorModel92|\AskNews\Model\AsknewsApiErrorsAPIErrorModel
     */
    public function searchWiki($query = '', $neighbor_chunks = null, $n_documents = null, $full_articles = null, $hybrid_search = null, $string_guarantee = null, $diversify = null, $include_main_section = null, string $contentType = self::contentTypes['searchWiki'][0])
    {
        list($response) = $this->searchWikiWithHttpInfo($query, $neighbor_chunks, $n_documents, $full_articles, $hybrid_search, $string_guarantee, $diversify, $include_main_section, $contentType);
        return $response;
    }

    /**
     * Operation searchWikiWithHttpInfo
     *
     * Search for Wikipedia context with natural language
     *
     * @param  string $query Natural language query that can be any phrase, keyword, question, or paragraph. (optional, default to '')
     * @param  int $neighbor_chunks Number of neighbor chunks to attach and return. If 0, then no neighbor chunks will be returned. (optional)
     * @param  int $n_documents Number of documents to return. If 0, then no documents will be returned. (optional)
     * @param  bool $full_articles If true, then full articles will be returned. If false, then only chunks and their neighbors will be returned. Beware that returning full articles increases data size which increases token usage downstream. (optional)
     * @param  bool $hybrid_search If true, then hybrid search will be used. If false, then only vector search will be used. (optional)
     * @param  string[] $string_guarantee List of strings that must be present in the results. If empty, then no string guarantee will be applied. (optional)
     * @param  float $diversify Diversity factor for MMR re-ranking. 0.0 means no diversity (pure relevance), 1.0 means full diversity. (optional)
     * @param  bool $include_main_section If true, then the main section of the article will be included at the start of each chunk&#39;s content. If false, then only the chunk content will be returned. Useful because the main section often contains important context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchWiki'] to see the possible values for this operation
     *
     * @throws \AskNews\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AskNews\Model\WikiSearchResponse|\AskNews\Model\ValidationErrorModel|\AskNews\Model\AbcAPIErrorModel89|\AskNews\Model\AbcAPIErrorModel90|\AskNews\Model\AbcAPIErrorModel91|\AskNews\Model\AbcAPIErrorModel92|\AskNews\Model\AsknewsApiErrorsAPIErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWikiWithHttpInfo($query = '', $neighbor_chunks = null, $n_documents = null, $full_articles = null, $hybrid_search = null, $string_guarantee = null, $diversify = null, $include_main_section = null, string $contentType = self::contentTypes['searchWiki'][0])
    {
        $request = $this->searchWikiRequest($query, $neighbor_chunks, $n_documents, $full_articles, $hybrid_search, $string_guarantee, $diversify, $include_main_section, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\AskNews\Model\WikiSearchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\WikiSearchResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\WikiSearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\AskNews\Model\ValidationErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\ValidationErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\ValidationErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\AskNews\Model\AbcAPIErrorModel89' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\AbcAPIErrorModel89' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\AbcAPIErrorModel89', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\AskNews\Model\AbcAPIErrorModel90' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\AbcAPIErrorModel90' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\AbcAPIErrorModel90', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\AskNews\Model\AbcAPIErrorModel91' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\AbcAPIErrorModel91' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\AbcAPIErrorModel91', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AskNews\Model\AbcAPIErrorModel92' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\AbcAPIErrorModel92' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\AbcAPIErrorModel92', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\AskNews\Model\AsknewsApiErrorsAPIErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AskNews\Model\AsknewsApiErrorsAPIErrorModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AskNews\Model\AsknewsApiErrorsAPIErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\AskNews\Model\WikiSearchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\WikiSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\ValidationErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\AbcAPIErrorModel89',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\AbcAPIErrorModel90',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\AbcAPIErrorModel91',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\AbcAPIErrorModel92',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AskNews\Model\AsknewsApiErrorsAPIErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchWikiAsync
     *
     * Search for Wikipedia context with natural language
     *
     * @param  string $query Natural language query that can be any phrase, keyword, question, or paragraph. (optional, default to '')
     * @param  int $neighbor_chunks Number of neighbor chunks to attach and return. If 0, then no neighbor chunks will be returned. (optional)
     * @param  int $n_documents Number of documents to return. If 0, then no documents will be returned. (optional)
     * @param  bool $full_articles If true, then full articles will be returned. If false, then only chunks and their neighbors will be returned. Beware that returning full articles increases data size which increases token usage downstream. (optional)
     * @param  bool $hybrid_search If true, then hybrid search will be used. If false, then only vector search will be used. (optional)
     * @param  string[] $string_guarantee List of strings that must be present in the results. If empty, then no string guarantee will be applied. (optional)
     * @param  float $diversify Diversity factor for MMR re-ranking. 0.0 means no diversity (pure relevance), 1.0 means full diversity. (optional)
     * @param  bool $include_main_section If true, then the main section of the article will be included at the start of each chunk&#39;s content. If false, then only the chunk content will be returned. Useful because the main section often contains important context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchWiki'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchWikiAsync($query = '', $neighbor_chunks = null, $n_documents = null, $full_articles = null, $hybrid_search = null, $string_guarantee = null, $diversify = null, $include_main_section = null, string $contentType = self::contentTypes['searchWiki'][0])
    {
        return $this->searchWikiAsyncWithHttpInfo($query, $neighbor_chunks, $n_documents, $full_articles, $hybrid_search, $string_guarantee, $diversify, $include_main_section, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchWikiAsyncWithHttpInfo
     *
     * Search for Wikipedia context with natural language
     *
     * @param  string $query Natural language query that can be any phrase, keyword, question, or paragraph. (optional, default to '')
     * @param  int $neighbor_chunks Number of neighbor chunks to attach and return. If 0, then no neighbor chunks will be returned. (optional)
     * @param  int $n_documents Number of documents to return. If 0, then no documents will be returned. (optional)
     * @param  bool $full_articles If true, then full articles will be returned. If false, then only chunks and their neighbors will be returned. Beware that returning full articles increases data size which increases token usage downstream. (optional)
     * @param  bool $hybrid_search If true, then hybrid search will be used. If false, then only vector search will be used. (optional)
     * @param  string[] $string_guarantee List of strings that must be present in the results. If empty, then no string guarantee will be applied. (optional)
     * @param  float $diversify Diversity factor for MMR re-ranking. 0.0 means no diversity (pure relevance), 1.0 means full diversity. (optional)
     * @param  bool $include_main_section If true, then the main section of the article will be included at the start of each chunk&#39;s content. If false, then only the chunk content will be returned. Useful because the main section often contains important context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchWiki'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchWikiAsyncWithHttpInfo($query = '', $neighbor_chunks = null, $n_documents = null, $full_articles = null, $hybrid_search = null, $string_guarantee = null, $diversify = null, $include_main_section = null, string $contentType = self::contentTypes['searchWiki'][0])
    {
        $returnType = '\AskNews\Model\WikiSearchResponse';
        $request = $this->searchWikiRequest($query, $neighbor_chunks, $n_documents, $full_articles, $hybrid_search, $string_guarantee, $diversify, $include_main_section, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchWiki'
     *
     * @param  string $query Natural language query that can be any phrase, keyword, question, or paragraph. (optional, default to '')
     * @param  int $neighbor_chunks Number of neighbor chunks to attach and return. If 0, then no neighbor chunks will be returned. (optional)
     * @param  int $n_documents Number of documents to return. If 0, then no documents will be returned. (optional)
     * @param  bool $full_articles If true, then full articles will be returned. If false, then only chunks and their neighbors will be returned. Beware that returning full articles increases data size which increases token usage downstream. (optional)
     * @param  bool $hybrid_search If true, then hybrid search will be used. If false, then only vector search will be used. (optional)
     * @param  string[] $string_guarantee List of strings that must be present in the results. If empty, then no string guarantee will be applied. (optional)
     * @param  float $diversify Diversity factor for MMR re-ranking. 0.0 means no diversity (pure relevance), 1.0 means full diversity. (optional)
     * @param  bool $include_main_section If true, then the main section of the article will be included at the start of each chunk&#39;s content. If false, then only the chunk content will be returned. Useful because the main section often contains important context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchWiki'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchWikiRequest($query = '', $neighbor_chunks = null, $n_documents = null, $full_articles = null, $hybrid_search = null, $string_guarantee = null, $diversify = null, $include_main_section = null, string $contentType = self::contentTypes['searchWiki'][0])
    {


        if ($neighbor_chunks !== null && $neighbor_chunks > 10) {
            throw new \InvalidArgumentException('invalid value for "$neighbor_chunks" when calling WikiApi.searchWiki, must be smaller than or equal to 10.');
        }
        if ($neighbor_chunks !== null && $neighbor_chunks < 0) {
            throw new \InvalidArgumentException('invalid value for "$neighbor_chunks" when calling WikiApi.searchWiki, must be bigger than or equal to 0.');
        }
        
        if ($n_documents !== null && $n_documents > 20) {
            throw new \InvalidArgumentException('invalid value for "$n_documents" when calling WikiApi.searchWiki, must be smaller than or equal to 20.');
        }
        if ($n_documents !== null && $n_documents < 1) {
            throw new \InvalidArgumentException('invalid value for "$n_documents" when calling WikiApi.searchWiki, must be bigger than or equal to 1.');
        }
        



        if ($diversify !== null && $diversify > 1.0) {
            throw new \InvalidArgumentException('invalid value for "$diversify" when calling WikiApi.searchWiki, must be smaller than or equal to 1.0.');
        }
        if ($diversify !== null && $diversify < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$diversify" when calling WikiApi.searchWiki, must be bigger than or equal to 0.0.');
        }
        


        $resourcePath = '/v1/wiki/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $neighbor_chunks,
            'neighbor_chunks', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $n_documents,
            'n_documents', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $full_articles,
            'full_articles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hybrid_search,
            'hybrid_search', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $string_guarantee,
            'string_guarantee', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $diversify,
            'diversify', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_main_section,
            'include_main_section', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        if (!empty($this->config->getApiKey())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getApiKey();
        } else {
            if (!empty($this->config->getAccessToken())) {
                $now = time();
                $buffer = 10;
                if ($this->config->getAccessToken()->expires - $buffer < $now) {
                    $this->config->setAccessToken(null);
                }
            }

            if (empty($this->config->getAccessToken()) && !empty($this->config->getClientId()) && !empty($this->config->getClientSecret()) && !empty($this->config->getScopes())) {
                $response = $this->client->send(new Request(
                    'POST',
                    $this->config->getAuthUrl(),
                    [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                        'User-Agent' => $this->config->getUserAgent(),
                        'Authorization' => 'Basic ' . base64_encode($this->config->getClientId() . ':' . $this->config->getClientSecret())
                    ],
                    http_build_query([
                        'grant_type' => 'client_credentials',
                        'scope' => implode(' ', $this->config->getScopes()),
                    ])
                ));

                $data = json_decode($response->getBody()->getContents());
                $this->config->setAccessToken(
                    new AccessToken($data->token_type, $data->access_token, $data->expires_in + time(), $this->config->getScopes())
                );
            }

            if (!empty($this->config->getAccessToken())) {
                $token = $this->config->getAccessToken();
                $headers['Authorization'] = $token->tokenType . ' ' . $token->tokenValue;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * FilterParamsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AskNews
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AskNews API
 *
 * AskNews API
 *
 * The version of the OpenAPI document: 0.16.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AskNews\Model;

use \ArrayAccess;
use \AskNews\ObjectSerializer;

/**
 * FilterParamsResponse Class Doc Comment
 *
 * @category Class
 * @package  AskNews
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FilterParamsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FilterParamsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'query' => 'string',
        'categories' => 'string[]',
        'reporting_voice' => 'string[]',
        'strategy' => 'string',
        'hours_back' => 'int',
        'string_guarantee' => 'string[]',
        'string_guarantee_op' => 'string',
        'reverse_string_guarantee' => 'string[]',
        'entity_guarantee' => 'string[]',
        'entity_guarantee_op' => 'string',
        'countries' => 'string[]',
        'continents' => 'string[]',
        'sentiment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'query' => null,
        'categories' => null,
        'reporting_voice' => null,
        'strategy' => null,
        'hours_back' => null,
        'string_guarantee' => null,
        'string_guarantee_op' => null,
        'reverse_string_guarantee' => null,
        'entity_guarantee' => null,
        'entity_guarantee_op' => null,
        'countries' => null,
        'continents' => null,
        'sentiment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'query' => false,
        'categories' => false,
        'reporting_voice' => false,
        'strategy' => false,
        'hours_back' => false,
        'string_guarantee' => true,
        'string_guarantee_op' => false,
        'reverse_string_guarantee' => true,
        'entity_guarantee' => true,
        'entity_guarantee_op' => false,
        'countries' => true,
        'continents' => true,
        'sentiment' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'query' => 'query',
        'categories' => 'categories',
        'reporting_voice' => 'reporting_voice',
        'strategy' => 'strategy',
        'hours_back' => 'hours_back',
        'string_guarantee' => 'string_guarantee',
        'string_guarantee_op' => 'string_guarantee_op',
        'reverse_string_guarantee' => 'reverse_string_guarantee',
        'entity_guarantee' => 'entity_guarantee',
        'entity_guarantee_op' => 'entity_guarantee_op',
        'countries' => 'countries',
        'continents' => 'continents',
        'sentiment' => 'sentiment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'query' => 'setQuery',
        'categories' => 'setCategories',
        'reporting_voice' => 'setReportingVoice',
        'strategy' => 'setStrategy',
        'hours_back' => 'setHoursBack',
        'string_guarantee' => 'setStringGuarantee',
        'string_guarantee_op' => 'setStringGuaranteeOp',
        'reverse_string_guarantee' => 'setReverseStringGuarantee',
        'entity_guarantee' => 'setEntityGuarantee',
        'entity_guarantee_op' => 'setEntityGuaranteeOp',
        'countries' => 'setCountries',
        'continents' => 'setContinents',
        'sentiment' => 'setSentiment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'query' => 'getQuery',
        'categories' => 'getCategories',
        'reporting_voice' => 'getReportingVoice',
        'strategy' => 'getStrategy',
        'hours_back' => 'getHoursBack',
        'string_guarantee' => 'getStringGuarantee',
        'string_guarantee_op' => 'getStringGuaranteeOp',
        'reverse_string_guarantee' => 'getReverseStringGuarantee',
        'entity_guarantee' => 'getEntityGuarantee',
        'entity_guarantee_op' => 'getEntityGuaranteeOp',
        'countries' => 'getCountries',
        'continents' => 'getContinents',
        'sentiment' => 'getSentiment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CATEGORIES_ALL = 'All';
    public const CATEGORIES_BUSINESS = 'Business';
    public const CATEGORIES_CRIME = 'Crime';
    public const CATEGORIES_POLITICS = 'Politics';
    public const CATEGORIES_SCIENCE = 'Science';
    public const CATEGORIES_SPORTS = 'Sports';
    public const CATEGORIES_TECHNOLOGY = 'Technology';
    public const CATEGORIES_MILITARY = 'Military';
    public const CATEGORIES_HEALTH = 'Health';
    public const CATEGORIES_ENTERTAINMENT = 'Entertainment';
    public const CATEGORIES_FINANCE = 'Finance';
    public const CATEGORIES_CULTURE = 'Culture';
    public const CATEGORIES_CLIMATE = 'Climate';
    public const CATEGORIES_ENVIRONMENT = 'Environment';
    public const CATEGORIES_WORLD = 'World';
    public const REPORTING_VOICE_OBJECTIVE = 'Objective';
    public const REPORTING_VOICE_SUBJECTIVE = 'Subjective';
    public const REPORTING_VOICE_INVESTIGATIVE = 'Investigative';
    public const REPORTING_VOICE_NARRATIVE = 'Narrative';
    public const REPORTING_VOICE_ANALYTICAL = 'Analytical';
    public const REPORTING_VOICE_ADVOCACY = 'Advocacy';
    public const REPORTING_VOICE_CONVERSATIONAL = 'Conversational';
    public const REPORTING_VOICE_SATIRICAL = 'Satirical';
    public const REPORTING_VOICE_EMOTIVE = 'Emotive';
    public const REPORTING_VOICE_EXPLANATORY = 'Explanatory';
    public const REPORTING_VOICE_PERSUASIVE = 'Persuasive';
    public const REPORTING_VOICE_SENSATIONAL = 'Sensational';
    public const REPORTING_VOICE_UNKNOWN = 'Unknown';
    public const REPORTING_VOICE_ALL = 'all';
    public const STRATEGY_LATEST_NEWS = 'latest news';
    public const STRATEGY_NEWS_KNOWLEDGE = 'news knowledge';
    public const STRATEGY__DEFAULT = 'default';
    public const STRING_GUARANTEE_OP__AND = 'AND';
    public const STRING_GUARANTEE_OP__OR = 'OR';
    public const ENTITY_GUARANTEE_OP__AND = 'AND';
    public const ENTITY_GUARANTEE_OP__OR = 'OR';
    public const CONTINENTS_AFRICA = 'Africa';
    public const CONTINENTS_ASIA = 'Asia';
    public const CONTINENTS_OCEANIA = 'Oceania';
    public const CONTINENTS_EUROPE = 'Europe';
    public const CONTINENTS_MIDDLE_EAST = 'Middle East';
    public const CONTINENTS_NORTH_AMERICA = 'North America';
    public const CONTINENTS_SOUTH_AMERICA = 'South America';
    public const SENTIMENT_NEGATIVE = 'negative';
    public const SENTIMENT_NEUTRAL = 'neutral';
    public const SENTIMENT_POSITIVE = 'positive';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoriesAllowableValues()
    {
        return [
            self::CATEGORIES_ALL,
            self::CATEGORIES_BUSINESS,
            self::CATEGORIES_CRIME,
            self::CATEGORIES_POLITICS,
            self::CATEGORIES_SCIENCE,
            self::CATEGORIES_SPORTS,
            self::CATEGORIES_TECHNOLOGY,
            self::CATEGORIES_MILITARY,
            self::CATEGORIES_HEALTH,
            self::CATEGORIES_ENTERTAINMENT,
            self::CATEGORIES_FINANCE,
            self::CATEGORIES_CULTURE,
            self::CATEGORIES_CLIMATE,
            self::CATEGORIES_ENVIRONMENT,
            self::CATEGORIES_WORLD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportingVoiceAllowableValues()
    {
        return [
            self::REPORTING_VOICE_OBJECTIVE,
            self::REPORTING_VOICE_SUBJECTIVE,
            self::REPORTING_VOICE_INVESTIGATIVE,
            self::REPORTING_VOICE_NARRATIVE,
            self::REPORTING_VOICE_ANALYTICAL,
            self::REPORTING_VOICE_ADVOCACY,
            self::REPORTING_VOICE_CONVERSATIONAL,
            self::REPORTING_VOICE_SATIRICAL,
            self::REPORTING_VOICE_EMOTIVE,
            self::REPORTING_VOICE_EXPLANATORY,
            self::REPORTING_VOICE_PERSUASIVE,
            self::REPORTING_VOICE_SENSATIONAL,
            self::REPORTING_VOICE_UNKNOWN,
            self::REPORTING_VOICE_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrategyAllowableValues()
    {
        return [
            self::STRATEGY_LATEST_NEWS,
            self::STRATEGY_NEWS_KNOWLEDGE,
            self::STRATEGY__DEFAULT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStringGuaranteeOpAllowableValues()
    {
        return [
            self::STRING_GUARANTEE_OP__AND,
            self::STRING_GUARANTEE_OP__OR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityGuaranteeOpAllowableValues()
    {
        return [
            self::ENTITY_GUARANTEE_OP__AND,
            self::ENTITY_GUARANTEE_OP__OR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContinentsAllowableValues()
    {
        return [
            self::CONTINENTS_AFRICA,
            self::CONTINENTS_ASIA,
            self::CONTINENTS_OCEANIA,
            self::CONTINENTS_EUROPE,
            self::CONTINENTS_MIDDLE_EAST,
            self::CONTINENTS_NORTH_AMERICA,
            self::CONTINENTS_SOUTH_AMERICA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSentimentAllowableValues()
    {
        return [
            self::SENTIMENT_NEGATIVE,
            self::SENTIMENT_NEUTRAL,
            self::SENTIMENT_POSITIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('query', $data ?? [], '[]');
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('reporting_voice', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], '[default]');
        $this->setIfExists('hours_back', $data ?? [], [24]);
        $this->setIfExists('string_guarantee', $data ?? [], null);
        $this->setIfExists('string_guarantee_op', $data ?? [], '[AND]');
        $this->setIfExists('reverse_string_guarantee', $data ?? [], null);
        $this->setIfExists('entity_guarantee', $data ?? [], null);
        $this->setIfExists('entity_guarantee_op', $data ?? [], '[OR]');
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('continents', $data ?? [], null);
        $this->setIfExists('sentiment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStrategyAllowableValues();
        if (!is_null($this->container['strategy']) && !in_array($this->container['strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'strategy', must be one of '%s'",
                $this->container['strategy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStringGuaranteeOpAllowableValues();
        if (!is_null($this->container['string_guarantee_op']) && !in_array($this->container['string_guarantee_op'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'string_guarantee_op', must be one of '%s'",
                $this->container['string_guarantee_op'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntityGuaranteeOpAllowableValues();
        if (!is_null($this->container['entity_guarantee_op']) && !in_array($this->container['entity_guarantee_op'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entity_guarantee_op', must be one of '%s'",
                $this->container['entity_guarantee_op'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSentimentAllowableValues();
        if (!is_null($this->container['sentiment']) && !in_array($this->container['sentiment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sentiment', must be one of '%s'",
                $this->container['sentiment'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets query
     *
     * @return string|null
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string|null $query query
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $allowedValues = $this->getCategoriesAllowableValues();
        if (array_diff($categories, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'categories', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets reporting_voice
     *
     * @return string[]|null
     */
    public function getReportingVoice()
    {
        return $this->container['reporting_voice'];
    }

    /**
     * Sets reporting_voice
     *
     * @param string[]|null $reporting_voice reporting_voice
     *
     * @return self
     */
    public function setReportingVoice($reporting_voice)
    {
        if (is_null($reporting_voice)) {
            throw new \InvalidArgumentException('non-nullable reporting_voice cannot be null');
        }
        $allowedValues = $this->getReportingVoiceAllowableValues();
        if (array_diff($reporting_voice, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reporting_voice', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reporting_voice'] = $reporting_voice;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string|null $strategy strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }
        $allowedValues = $this->getStrategyAllowableValues();
        if (!in_array($strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'strategy', must be one of '%s'",
                    $strategy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets hours_back
     *
     * @return int|null
     */
    public function getHoursBack()
    {
        return $this->container['hours_back'];
    }

    /**
     * Sets hours_back
     *
     * @param int|null $hours_back hours_back
     *
     * @return self
     */
    public function setHoursBack($hours_back)
    {
        if (is_null($hours_back)) {
            throw new \InvalidArgumentException('non-nullable hours_back cannot be null');
        }
        $this->container['hours_back'] = $hours_back;

        return $this;
    }

    /**
     * Gets string_guarantee
     *
     * @return string[]|null
     */
    public function getStringGuarantee()
    {
        return $this->container['string_guarantee'];
    }

    /**
     * Sets string_guarantee
     *
     * @param string[]|null $string_guarantee string_guarantee
     *
     * @return self
     */
    public function setStringGuarantee($string_guarantee)
    {
        if (is_null($string_guarantee)) {
            array_push($this->openAPINullablesSetToNull, 'string_guarantee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('string_guarantee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['string_guarantee'] = $string_guarantee;

        return $this;
    }

    /**
     * Gets string_guarantee_op
     *
     * @return string|null
     */
    public function getStringGuaranteeOp()
    {
        return $this->container['string_guarantee_op'];
    }

    /**
     * Sets string_guarantee_op
     *
     * @param string|null $string_guarantee_op string_guarantee_op
     *
     * @return self
     */
    public function setStringGuaranteeOp($string_guarantee_op)
    {
        if (is_null($string_guarantee_op)) {
            throw new \InvalidArgumentException('non-nullable string_guarantee_op cannot be null');
        }
        $allowedValues = $this->getStringGuaranteeOpAllowableValues();
        if (!in_array($string_guarantee_op, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'string_guarantee_op', must be one of '%s'",
                    $string_guarantee_op,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['string_guarantee_op'] = $string_guarantee_op;

        return $this;
    }

    /**
     * Gets reverse_string_guarantee
     *
     * @return string[]|null
     */
    public function getReverseStringGuarantee()
    {
        return $this->container['reverse_string_guarantee'];
    }

    /**
     * Sets reverse_string_guarantee
     *
     * @param string[]|null $reverse_string_guarantee reverse_string_guarantee
     *
     * @return self
     */
    public function setReverseStringGuarantee($reverse_string_guarantee)
    {
        if (is_null($reverse_string_guarantee)) {
            array_push($this->openAPINullablesSetToNull, 'reverse_string_guarantee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reverse_string_guarantee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reverse_string_guarantee'] = $reverse_string_guarantee;

        return $this;
    }

    /**
     * Gets entity_guarantee
     *
     * @return string[]|null
     */
    public function getEntityGuarantee()
    {
        return $this->container['entity_guarantee'];
    }

    /**
     * Sets entity_guarantee
     *
     * @param string[]|null $entity_guarantee entity_guarantee
     *
     * @return self
     */
    public function setEntityGuarantee($entity_guarantee)
    {
        if (is_null($entity_guarantee)) {
            array_push($this->openAPINullablesSetToNull, 'entity_guarantee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entity_guarantee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entity_guarantee'] = $entity_guarantee;

        return $this;
    }

    /**
     * Gets entity_guarantee_op
     *
     * @return string|null
     */
    public function getEntityGuaranteeOp()
    {
        return $this->container['entity_guarantee_op'];
    }

    /**
     * Sets entity_guarantee_op
     *
     * @param string|null $entity_guarantee_op entity_guarantee_op
     *
     * @return self
     */
    public function setEntityGuaranteeOp($entity_guarantee_op)
    {
        if (is_null($entity_guarantee_op)) {
            throw new \InvalidArgumentException('non-nullable entity_guarantee_op cannot be null');
        }
        $allowedValues = $this->getEntityGuaranteeOpAllowableValues();
        if (!in_array($entity_guarantee_op, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entity_guarantee_op', must be one of '%s'",
                    $entity_guarantee_op,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entity_guarantee_op'] = $entity_guarantee_op;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[]|null $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            array_push($this->openAPINullablesSetToNull, 'countries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets continents
     *
     * @return string[]|null
     */
    public function getContinents()
    {
        return $this->container['continents'];
    }

    /**
     * Sets continents
     *
     * @param string[]|null $continents continents
     *
     * @return self
     */
    public function setContinents($continents)
    {
        if (is_null($continents)) {
            array_push($this->openAPINullablesSetToNull, 'continents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('continents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getContinentsAllowableValues();
        if (!is_null($continents) && array_diff($continents, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'continents', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['continents'] = $continents;

        return $this;
    }

    /**
     * Gets sentiment
     *
     * @return string|null
     */
    public function getSentiment()
    {
        return $this->container['sentiment'];
    }

    /**
     * Sets sentiment
     *
     * @param string|null $sentiment sentiment
     *
     * @return self
     */
    public function setSentiment($sentiment)
    {
        if (is_null($sentiment)) {
            array_push($this->openAPINullablesSetToNull, 'sentiment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sentiment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSentimentAllowableValues();
        if (!is_null($sentiment) && !in_array($sentiment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sentiment', must be one of '%s'",
                    $sentiment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sentiment'] = $sentiment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



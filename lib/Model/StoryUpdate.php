<?php
/**
 * StoryUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AskNews
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AskNews API
 *
 * AskNews API
 *
 * The version of the OpenAPI document: 0.13.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AskNews\Model;

use \ArrayAccess;
use \AskNews\ObjectSerializer;

/**
 * StoryUpdate Class Doc Comment
 *
 * @category Class
 * @package  AskNews
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StoryUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StoryUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'cluster_articles' => '\AskNews\Model\Article[]',
        'prompt_articles' => '\AskNews\Model\Article[]',
        'n_articles' => 'int',
        'entities' => '\AskNews\Model\Entities',
        'headline' => 'string',
        'story' => 'string',
        'story_update_ts' => 'int',
        'sources_urls' => 'array<string,int>',
        'languages_pct' => 'array<string,float>',
        'countries_pct' => 'array<string,float>',
        'key_takeaways' => 'string[]',
        'contradictions' => 'string[]',
        'continent' => 'string',
        'people' => 'string[]',
        'locations' => 'string[]',
        'new_information' => 'string',
        'image_url' => 'string',
        'url_safe_title' => 'string',
        'story_uuid' => 'string',
        'categories' => 'string[]',
        'image_prompt' => 'string',
        'reddit_perspective' => '\AskNews\Model\RedditPerspective',
        'reddit_threads' => '\AskNews\Model\RedditThread[]',
        'languages' => 'array<string,int>',
        'keywords' => 'string[]',
        'intra_cluster_statistics' => '\AskNews\Model\IntraClusterStatistics',
        'silhouette_score' => 'object',
        'article_ids' => 'string[]',
        'countries' => 'array<string,int>',
        'markdown_citations' => 'string[]',
        'confidence' => 'float',
        'provocative' => 'string',
        'reporting_voice' => 'string',
        'relationships' => '\AskNews\Model\AsknewsApiSchemaV1StoriesGraphRelationships',
        'mermaid' => 'string',
        'cc_image_url' => 'string',
        'display_image_urls' => '\AskNews\Model\StoryUpdateDisplayImageUrlsInner[]',
        'alignment' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'cluster_articles' => null,
        'prompt_articles' => null,
        'n_articles' => null,
        'entities' => null,
        'headline' => null,
        'story' => null,
        'story_update_ts' => null,
        'sources_urls' => null,
        'languages_pct' => null,
        'countries_pct' => null,
        'key_takeaways' => null,
        'contradictions' => null,
        'continent' => null,
        'people' => null,
        'locations' => null,
        'new_information' => null,
        'image_url' => 'uri',
        'url_safe_title' => null,
        'story_uuid' => 'uuid',
        'categories' => null,
        'image_prompt' => null,
        'reddit_perspective' => null,
        'reddit_threads' => null,
        'languages' => null,
        'keywords' => null,
        'intra_cluster_statistics' => null,
        'silhouette_score' => null,
        'article_ids' => 'uuid',
        'countries' => null,
        'markdown_citations' => null,
        'confidence' => null,
        'provocative' => null,
        'reporting_voice' => null,
        'relationships' => null,
        'mermaid' => null,
        'cc_image_url' => null,
        'display_image_urls' => null,
        'alignment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => false,
        'cluster_articles' => false,
        'prompt_articles' => false,
        'n_articles' => false,
        'entities' => false,
        'headline' => false,
        'story' => false,
        'story_update_ts' => false,
        'sources_urls' => false,
        'languages_pct' => false,
        'countries_pct' => false,
        'key_takeaways' => false,
        'contradictions' => false,
        'continent' => false,
        'people' => false,
        'locations' => false,
        'new_information' => false,
        'image_url' => false,
        'url_safe_title' => false,
        'story_uuid' => false,
        'categories' => false,
        'image_prompt' => false,
        'reddit_perspective' => false,
        'reddit_threads' => false,
        'languages' => false,
        'keywords' => false,
        'intra_cluster_statistics' => false,
        'silhouette_score' => false,
        'article_ids' => false,
        'countries' => false,
        'markdown_citations' => false,
        'confidence' => false,
        'provocative' => false,
        'reporting_voice' => false,
        'relationships' => false,
        'mermaid' => false,
        'cc_image_url' => false,
        'display_image_urls' => false,
        'alignment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'cluster_articles' => 'cluster_articles',
        'prompt_articles' => 'prompt_articles',
        'n_articles' => 'n_articles',
        'entities' => 'entities',
        'headline' => 'headline',
        'story' => 'story',
        'story_update_ts' => 'story_update_ts',
        'sources_urls' => 'sources_urls',
        'languages_pct' => 'languages_pct',
        'countries_pct' => 'countries_pct',
        'key_takeaways' => 'key_takeaways',
        'contradictions' => 'contradictions',
        'continent' => 'continent',
        'people' => 'people',
        'locations' => 'locations',
        'new_information' => 'new_information',
        'image_url' => 'image_url',
        'url_safe_title' => 'url_safe_title',
        'story_uuid' => 'story_uuid',
        'categories' => 'categories',
        'image_prompt' => 'image_prompt',
        'reddit_perspective' => 'reddit_perspective',
        'reddit_threads' => 'reddit_threads',
        'languages' => 'languages',
        'keywords' => 'keywords',
        'intra_cluster_statistics' => 'intra_cluster_statistics',
        'silhouette_score' => 'silhouette_score',
        'article_ids' => 'article_ids',
        'countries' => 'countries',
        'markdown_citations' => 'markdown_citations',
        'confidence' => 'confidence',
        'provocative' => 'provocative',
        'reporting_voice' => 'reporting_voice',
        'relationships' => 'relationships',
        'mermaid' => 'mermaid',
        'cc_image_url' => 'cc_image_url',
        'display_image_urls' => 'display_image_urls',
        'alignment' => 'alignment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'cluster_articles' => 'setClusterArticles',
        'prompt_articles' => 'setPromptArticles',
        'n_articles' => 'setNArticles',
        'entities' => 'setEntities',
        'headline' => 'setHeadline',
        'story' => 'setStory',
        'story_update_ts' => 'setStoryUpdateTs',
        'sources_urls' => 'setSourcesUrls',
        'languages_pct' => 'setLanguagesPct',
        'countries_pct' => 'setCountriesPct',
        'key_takeaways' => 'setKeyTakeaways',
        'contradictions' => 'setContradictions',
        'continent' => 'setContinent',
        'people' => 'setPeople',
        'locations' => 'setLocations',
        'new_information' => 'setNewInformation',
        'image_url' => 'setImageUrl',
        'url_safe_title' => 'setUrlSafeTitle',
        'story_uuid' => 'setStoryUuid',
        'categories' => 'setCategories',
        'image_prompt' => 'setImagePrompt',
        'reddit_perspective' => 'setRedditPerspective',
        'reddit_threads' => 'setRedditThreads',
        'languages' => 'setLanguages',
        'keywords' => 'setKeywords',
        'intra_cluster_statistics' => 'setIntraClusterStatistics',
        'silhouette_score' => 'setSilhouetteScore',
        'article_ids' => 'setArticleIds',
        'countries' => 'setCountries',
        'markdown_citations' => 'setMarkdownCitations',
        'confidence' => 'setConfidence',
        'provocative' => 'setProvocative',
        'reporting_voice' => 'setReportingVoice',
        'relationships' => 'setRelationships',
        'mermaid' => 'setMermaid',
        'cc_image_url' => 'setCcImageUrl',
        'display_image_urls' => 'setDisplayImageUrls',
        'alignment' => 'setAlignment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'cluster_articles' => 'getClusterArticles',
        'prompt_articles' => 'getPromptArticles',
        'n_articles' => 'getNArticles',
        'entities' => 'getEntities',
        'headline' => 'getHeadline',
        'story' => 'getStory',
        'story_update_ts' => 'getStoryUpdateTs',
        'sources_urls' => 'getSourcesUrls',
        'languages_pct' => 'getLanguagesPct',
        'countries_pct' => 'getCountriesPct',
        'key_takeaways' => 'getKeyTakeaways',
        'contradictions' => 'getContradictions',
        'continent' => 'getContinent',
        'people' => 'getPeople',
        'locations' => 'getLocations',
        'new_information' => 'getNewInformation',
        'image_url' => 'getImageUrl',
        'url_safe_title' => 'getUrlSafeTitle',
        'story_uuid' => 'getStoryUuid',
        'categories' => 'getCategories',
        'image_prompt' => 'getImagePrompt',
        'reddit_perspective' => 'getRedditPerspective',
        'reddit_threads' => 'getRedditThreads',
        'languages' => 'getLanguages',
        'keywords' => 'getKeywords',
        'intra_cluster_statistics' => 'getIntraClusterStatistics',
        'silhouette_score' => 'getSilhouetteScore',
        'article_ids' => 'getArticleIds',
        'countries' => 'getCountries',
        'markdown_citations' => 'getMarkdownCitations',
        'confidence' => 'getConfidence',
        'provocative' => 'getProvocative',
        'reporting_voice' => 'getReportingVoice',
        'relationships' => 'getRelationships',
        'mermaid' => 'getMermaid',
        'cc_image_url' => 'getCcImageUrl',
        'display_image_urls' => 'getDisplayImageUrls',
        'alignment' => 'getAlignment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROVOCATIVE_UNKNOWN = 'unknown';
    public const PROVOCATIVE_LOW = 'low';
    public const PROVOCATIVE_MEDIUM = 'medium';
    public const PROVOCATIVE_HIGH = 'high';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProvocativeAllowableValues()
    {
        return [
            self::PROVOCATIVE_UNKNOWN,
            self::PROVOCATIVE_LOW,
            self::PROVOCATIVE_MEDIUM,
            self::PROVOCATIVE_HIGH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('cluster_articles', $data ?? [], null);
        $this->setIfExists('prompt_articles', $data ?? [], null);
        $this->setIfExists('n_articles', $data ?? [], null);
        $this->setIfExists('entities', $data ?? [], null);
        $this->setIfExists('headline', $data ?? [], null);
        $this->setIfExists('story', $data ?? [], null);
        $this->setIfExists('story_update_ts', $data ?? [], null);
        $this->setIfExists('sources_urls', $data ?? [], null);
        $this->setIfExists('languages_pct', $data ?? [], null);
        $this->setIfExists('countries_pct', $data ?? [], null);
        $this->setIfExists('key_takeaways', $data ?? [], null);
        $this->setIfExists('contradictions', $data ?? [], null);
        $this->setIfExists('continent', $data ?? [], null);
        $this->setIfExists('people', $data ?? [], null);
        $this->setIfExists('locations', $data ?? [], null);
        $this->setIfExists('new_information', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('url_safe_title', $data ?? [], null);
        $this->setIfExists('story_uuid', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('image_prompt', $data ?? [], null);
        $this->setIfExists('reddit_perspective', $data ?? [], null);
        $this->setIfExists('reddit_threads', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('intra_cluster_statistics', $data ?? [], null);
        $this->setIfExists('silhouette_score', $data ?? [], null);
        $this->setIfExists('article_ids', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('markdown_citations', $data ?? [], null);
        $this->setIfExists('confidence', $data ?? [], 0.0);
        $this->setIfExists('provocative', $data ?? [], 'unknown');
        $this->setIfExists('reporting_voice', $data ?? [], 'Reporting voice unknown.');
        $this->setIfExists('relationships', $data ?? [], null);
        $this->setIfExists('mermaid', $data ?? [], null);
        $this->setIfExists('cc_image_url', $data ?? [], null);
        $this->setIfExists('display_image_urls', $data ?? [], null);
        $this->setIfExists('alignment', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['cluster_articles'] === null) {
            $invalidProperties[] = "'cluster_articles' can't be null";
        }
        if ($this->container['prompt_articles'] === null) {
            $invalidProperties[] = "'prompt_articles' can't be null";
        }
        if ($this->container['n_articles'] === null) {
            $invalidProperties[] = "'n_articles' can't be null";
        }
        if ($this->container['entities'] === null) {
            $invalidProperties[] = "'entities' can't be null";
        }
        if ($this->container['headline'] === null) {
            $invalidProperties[] = "'headline' can't be null";
        }
        if ($this->container['story'] === null) {
            $invalidProperties[] = "'story' can't be null";
        }
        if ($this->container['story_update_ts'] === null) {
            $invalidProperties[] = "'story_update_ts' can't be null";
        }
        if ($this->container['sources_urls'] === null) {
            $invalidProperties[] = "'sources_urls' can't be null";
        }
        if ($this->container['languages_pct'] === null) {
            $invalidProperties[] = "'languages_pct' can't be null";
        }
        if ($this->container['countries_pct'] === null) {
            $invalidProperties[] = "'countries_pct' can't be null";
        }
        if ($this->container['key_takeaways'] === null) {
            $invalidProperties[] = "'key_takeaways' can't be null";
        }
        if ($this->container['contradictions'] === null) {
            $invalidProperties[] = "'contradictions' can't be null";
        }
        if ($this->container['continent'] === null) {
            $invalidProperties[] = "'continent' can't be null";
        }
        if ($this->container['people'] === null) {
            $invalidProperties[] = "'people' can't be null";
        }
        if ($this->container['locations'] === null) {
            $invalidProperties[] = "'locations' can't be null";
        }
        if ($this->container['new_information'] === null) {
            $invalidProperties[] = "'new_information' can't be null";
        }
        if ($this->container['image_url'] === null) {
            $invalidProperties[] = "'image_url' can't be null";
        }
        if ((mb_strlen($this->container['image_url']) > 2083)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be smaller than or equal to 2083.";
        }

        if ((mb_strlen($this->container['image_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'image_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['url_safe_title'] === null) {
            $invalidProperties[] = "'url_safe_title' can't be null";
        }
        if ($this->container['story_uuid'] === null) {
            $invalidProperties[] = "'story_uuid' can't be null";
        }
        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        if ($this->container['image_prompt'] === null) {
            $invalidProperties[] = "'image_prompt' can't be null";
        }
        if ($this->container['reddit_perspective'] === null) {
            $invalidProperties[] = "'reddit_perspective' can't be null";
        }
        if ($this->container['reddit_threads'] === null) {
            $invalidProperties[] = "'reddit_threads' can't be null";
        }
        if ($this->container['languages'] === null) {
            $invalidProperties[] = "'languages' can't be null";
        }
        if ($this->container['keywords'] === null) {
            $invalidProperties[] = "'keywords' can't be null";
        }
        if ($this->container['intra_cluster_statistics'] === null) {
            $invalidProperties[] = "'intra_cluster_statistics' can't be null";
        }
        if ($this->container['silhouette_score'] === null) {
            $invalidProperties[] = "'silhouette_score' can't be null";
        }
        if ($this->container['article_ids'] === null) {
            $invalidProperties[] = "'article_ids' can't be null";
        }
        if ($this->container['countries'] === null) {
            $invalidProperties[] = "'countries' can't be null";
        }
        if ($this->container['markdown_citations'] === null) {
            $invalidProperties[] = "'markdown_citations' can't be null";
        }
        $allowedValues = $this->getProvocativeAllowableValues();
        if (!is_null($this->container['provocative']) && !in_array($this->container['provocative'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provocative', must be one of '%s'",
                $this->container['provocative'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['relationships'] === null) {
            $invalidProperties[] = "'relationships' can't be null";
        }
        if ($this->container['mermaid'] === null) {
            $invalidProperties[] = "'mermaid' can't be null";
        }
        if ($this->container['cc_image_url'] === null) {
            $invalidProperties[] = "'cc_image_url' can't be null";
        }
        if ($this->container['display_image_urls'] === null) {
            $invalidProperties[] = "'display_image_urls' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets cluster_articles
     *
     * @return \AskNews\Model\Article[]
     */
    public function getClusterArticles()
    {
        return $this->container['cluster_articles'];
    }

    /**
     * Sets cluster_articles
     *
     * @param \AskNews\Model\Article[] $cluster_articles cluster_articles
     *
     * @return self
     */
    public function setClusterArticles($cluster_articles)
    {
        if (is_null($cluster_articles)) {
            throw new \InvalidArgumentException('non-nullable cluster_articles cannot be null');
        }
        $this->container['cluster_articles'] = $cluster_articles;

        return $this;
    }

    /**
     * Gets prompt_articles
     *
     * @return \AskNews\Model\Article[]
     */
    public function getPromptArticles()
    {
        return $this->container['prompt_articles'];
    }

    /**
     * Sets prompt_articles
     *
     * @param \AskNews\Model\Article[] $prompt_articles prompt_articles
     *
     * @return self
     */
    public function setPromptArticles($prompt_articles)
    {
        if (is_null($prompt_articles)) {
            throw new \InvalidArgumentException('non-nullable prompt_articles cannot be null');
        }
        $this->container['prompt_articles'] = $prompt_articles;

        return $this;
    }

    /**
     * Gets n_articles
     *
     * @return int
     */
    public function getNArticles()
    {
        return $this->container['n_articles'];
    }

    /**
     * Sets n_articles
     *
     * @param int $n_articles n_articles
     *
     * @return self
     */
    public function setNArticles($n_articles)
    {
        if (is_null($n_articles)) {
            throw new \InvalidArgumentException('non-nullable n_articles cannot be null');
        }
        $this->container['n_articles'] = $n_articles;

        return $this;
    }

    /**
     * Gets entities
     *
     * @return \AskNews\Model\Entities
     */
    public function getEntities()
    {
        return $this->container['entities'];
    }

    /**
     * Sets entities
     *
     * @param \AskNews\Model\Entities $entities entities
     *
     * @return self
     */
    public function setEntities($entities)
    {
        if (is_null($entities)) {
            throw new \InvalidArgumentException('non-nullable entities cannot be null');
        }
        $this->container['entities'] = $entities;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string $headline headline
     *
     * @return self
     */
    public function setHeadline($headline)
    {
        if (is_null($headline)) {
            throw new \InvalidArgumentException('non-nullable headline cannot be null');
        }
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets story
     *
     * @return string
     */
    public function getStory()
    {
        return $this->container['story'];
    }

    /**
     * Sets story
     *
     * @param string $story story
     *
     * @return self
     */
    public function setStory($story)
    {
        if (is_null($story)) {
            throw new \InvalidArgumentException('non-nullable story cannot be null');
        }
        $this->container['story'] = $story;

        return $this;
    }

    /**
     * Gets story_update_ts
     *
     * @return int
     */
    public function getStoryUpdateTs()
    {
        return $this->container['story_update_ts'];
    }

    /**
     * Sets story_update_ts
     *
     * @param int $story_update_ts story_update_ts
     *
     * @return self
     */
    public function setStoryUpdateTs($story_update_ts)
    {
        if (is_null($story_update_ts)) {
            throw new \InvalidArgumentException('non-nullable story_update_ts cannot be null');
        }
        $this->container['story_update_ts'] = $story_update_ts;

        return $this;
    }

    /**
     * Gets sources_urls
     *
     * @return array<string,int>
     */
    public function getSourcesUrls()
    {
        return $this->container['sources_urls'];
    }

    /**
     * Sets sources_urls
     *
     * @param array<string,int> $sources_urls sources_urls
     *
     * @return self
     */
    public function setSourcesUrls($sources_urls)
    {
        if (is_null($sources_urls)) {
            throw new \InvalidArgumentException('non-nullable sources_urls cannot be null');
        }
        $this->container['sources_urls'] = $sources_urls;

        return $this;
    }

    /**
     * Gets languages_pct
     *
     * @return array<string,float>
     */
    public function getLanguagesPct()
    {
        return $this->container['languages_pct'];
    }

    /**
     * Sets languages_pct
     *
     * @param array<string,float> $languages_pct languages_pct
     *
     * @return self
     */
    public function setLanguagesPct($languages_pct)
    {
        if (is_null($languages_pct)) {
            throw new \InvalidArgumentException('non-nullable languages_pct cannot be null');
        }
        $this->container['languages_pct'] = $languages_pct;

        return $this;
    }

    /**
     * Gets countries_pct
     *
     * @return array<string,float>
     */
    public function getCountriesPct()
    {
        return $this->container['countries_pct'];
    }

    /**
     * Sets countries_pct
     *
     * @param array<string,float> $countries_pct countries_pct
     *
     * @return self
     */
    public function setCountriesPct($countries_pct)
    {
        if (is_null($countries_pct)) {
            throw new \InvalidArgumentException('non-nullable countries_pct cannot be null');
        }
        $this->container['countries_pct'] = $countries_pct;

        return $this;
    }

    /**
     * Gets key_takeaways
     *
     * @return string[]
     */
    public function getKeyTakeaways()
    {
        return $this->container['key_takeaways'];
    }

    /**
     * Sets key_takeaways
     *
     * @param string[] $key_takeaways key_takeaways
     *
     * @return self
     */
    public function setKeyTakeaways($key_takeaways)
    {
        if (is_null($key_takeaways)) {
            throw new \InvalidArgumentException('non-nullable key_takeaways cannot be null');
        }
        $this->container['key_takeaways'] = $key_takeaways;

        return $this;
    }

    /**
     * Gets contradictions
     *
     * @return string[]
     */
    public function getContradictions()
    {
        return $this->container['contradictions'];
    }

    /**
     * Sets contradictions
     *
     * @param string[] $contradictions contradictions
     *
     * @return self
     */
    public function setContradictions($contradictions)
    {
        if (is_null($contradictions)) {
            throw new \InvalidArgumentException('non-nullable contradictions cannot be null');
        }
        $this->container['contradictions'] = $contradictions;

        return $this;
    }

    /**
     * Gets continent
     *
     * @return string
     */
    public function getContinent()
    {
        return $this->container['continent'];
    }

    /**
     * Sets continent
     *
     * @param string $continent continent
     *
     * @return self
     */
    public function setContinent($continent)
    {
        if (is_null($continent)) {
            throw new \InvalidArgumentException('non-nullable continent cannot be null');
        }
        $this->container['continent'] = $continent;

        return $this;
    }

    /**
     * Gets people
     *
     * @return string[]
     */
    public function getPeople()
    {
        return $this->container['people'];
    }

    /**
     * Sets people
     *
     * @param string[] $people people
     *
     * @return self
     */
    public function setPeople($people)
    {
        if (is_null($people)) {
            throw new \InvalidArgumentException('non-nullable people cannot be null');
        }
        $this->container['people'] = $people;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return string[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param string[] $locations locations
     *
     * @return self
     */
    public function setLocations($locations)
    {
        if (is_null($locations)) {
            throw new \InvalidArgumentException('non-nullable locations cannot be null');
        }
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets new_information
     *
     * @return string
     */
    public function getNewInformation()
    {
        return $this->container['new_information'];
    }

    /**
     * Sets new_information
     *
     * @param string $new_information new_information
     *
     * @return self
     */
    public function setNewInformation($new_information)
    {
        if (is_null($new_information)) {
            throw new \InvalidArgumentException('non-nullable new_information cannot be null');
        }
        $this->container['new_information'] = $new_information;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        if ((mb_strlen($image_url) > 2083)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling StoryUpdate., must be smaller than or equal to 2083.');
        }
        if ((mb_strlen($image_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $image_url when calling StoryUpdate., must be bigger than or equal to 1.');
        }

        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets url_safe_title
     *
     * @return string
     */
    public function getUrlSafeTitle()
    {
        return $this->container['url_safe_title'];
    }

    /**
     * Sets url_safe_title
     *
     * @param string $url_safe_title url_safe_title
     *
     * @return self
     */
    public function setUrlSafeTitle($url_safe_title)
    {
        if (is_null($url_safe_title)) {
            throw new \InvalidArgumentException('non-nullable url_safe_title cannot be null');
        }
        $this->container['url_safe_title'] = $url_safe_title;

        return $this;
    }

    /**
     * Gets story_uuid
     *
     * @return string
     */
    public function getStoryUuid()
    {
        return $this->container['story_uuid'];
    }

    /**
     * Sets story_uuid
     *
     * @param string $story_uuid story_uuid
     *
     * @return self
     */
    public function setStoryUuid($story_uuid)
    {
        if (is_null($story_uuid)) {
            throw new \InvalidArgumentException('non-nullable story_uuid cannot be null');
        }
        $this->container['story_uuid'] = $story_uuid;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets image_prompt
     *
     * @return string
     */
    public function getImagePrompt()
    {
        return $this->container['image_prompt'];
    }

    /**
     * Sets image_prompt
     *
     * @param string $image_prompt image_prompt
     *
     * @return self
     */
    public function setImagePrompt($image_prompt)
    {
        if (is_null($image_prompt)) {
            throw new \InvalidArgumentException('non-nullable image_prompt cannot be null');
        }
        $this->container['image_prompt'] = $image_prompt;

        return $this;
    }

    /**
     * Gets reddit_perspective
     *
     * @return \AskNews\Model\RedditPerspective
     */
    public function getRedditPerspective()
    {
        return $this->container['reddit_perspective'];
    }

    /**
     * Sets reddit_perspective
     *
     * @param \AskNews\Model\RedditPerspective $reddit_perspective reddit_perspective
     *
     * @return self
     */
    public function setRedditPerspective($reddit_perspective)
    {
        if (is_null($reddit_perspective)) {
            throw new \InvalidArgumentException('non-nullable reddit_perspective cannot be null');
        }
        $this->container['reddit_perspective'] = $reddit_perspective;

        return $this;
    }

    /**
     * Gets reddit_threads
     *
     * @return \AskNews\Model\RedditThread[]
     */
    public function getRedditThreads()
    {
        return $this->container['reddit_threads'];
    }

    /**
     * Sets reddit_threads
     *
     * @param \AskNews\Model\RedditThread[] $reddit_threads reddit_threads
     *
     * @return self
     */
    public function setRedditThreads($reddit_threads)
    {
        if (is_null($reddit_threads)) {
            throw new \InvalidArgumentException('non-nullable reddit_threads cannot be null');
        }
        $this->container['reddit_threads'] = $reddit_threads;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return array<string,int>
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param array<string,int> $languages languages
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            throw new \InvalidArgumentException('non-nullable languages cannot be null');
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[] $keywords keywords
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            throw new \InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets intra_cluster_statistics
     *
     * @return \AskNews\Model\IntraClusterStatistics
     */
    public function getIntraClusterStatistics()
    {
        return $this->container['intra_cluster_statistics'];
    }

    /**
     * Sets intra_cluster_statistics
     *
     * @param \AskNews\Model\IntraClusterStatistics $intra_cluster_statistics intra_cluster_statistics
     *
     * @return self
     */
    public function setIntraClusterStatistics($intra_cluster_statistics)
    {
        if (is_null($intra_cluster_statistics)) {
            throw new \InvalidArgumentException('non-nullable intra_cluster_statistics cannot be null');
        }
        $this->container['intra_cluster_statistics'] = $intra_cluster_statistics;

        return $this;
    }

    /**
     * Gets silhouette_score
     *
     * @return object
     */
    public function getSilhouetteScore()
    {
        return $this->container['silhouette_score'];
    }

    /**
     * Sets silhouette_score
     *
     * @param object $silhouette_score silhouette_score
     *
     * @return self
     */
    public function setSilhouetteScore($silhouette_score)
    {
        if (is_null($silhouette_score)) {
            throw new \InvalidArgumentException('non-nullable silhouette_score cannot be null');
        }
        $this->container['silhouette_score'] = $silhouette_score;

        return $this;
    }

    /**
     * Gets article_ids
     *
     * @return string[]
     */
    public function getArticleIds()
    {
        return $this->container['article_ids'];
    }

    /**
     * Sets article_ids
     *
     * @param string[] $article_ids article_ids
     *
     * @return self
     */
    public function setArticleIds($article_ids)
    {
        if (is_null($article_ids)) {
            throw new \InvalidArgumentException('non-nullable article_ids cannot be null');
        }
        $this->container['article_ids'] = $article_ids;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return array<string,int>
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param array<string,int> $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets markdown_citations
     *
     * @return string[]
     */
    public function getMarkdownCitations()
    {
        return $this->container['markdown_citations'];
    }

    /**
     * Sets markdown_citations
     *
     * @param string[] $markdown_citations markdown_citations
     *
     * @return self
     */
    public function setMarkdownCitations($markdown_citations)
    {
        if (is_null($markdown_citations)) {
            throw new \InvalidArgumentException('non-nullable markdown_citations cannot be null');
        }
        $this->container['markdown_citations'] = $markdown_citations;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return float|null
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param float|null $confidence confidence
     *
     * @return self
     */
    public function setConfidence($confidence)
    {
        if (is_null($confidence)) {
            throw new \InvalidArgumentException('non-nullable confidence cannot be null');
        }
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets provocative
     *
     * @return string|null
     */
    public function getProvocative()
    {
        return $this->container['provocative'];
    }

    /**
     * Sets provocative
     *
     * @param string|null $provocative provocative
     *
     * @return self
     */
    public function setProvocative($provocative)
    {
        if (is_null($provocative)) {
            throw new \InvalidArgumentException('non-nullable provocative cannot be null');
        }
        $allowedValues = $this->getProvocativeAllowableValues();
        if (!in_array($provocative, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provocative', must be one of '%s'",
                    $provocative,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provocative'] = $provocative;

        return $this;
    }

    /**
     * Gets reporting_voice
     *
     * @return string|null
     */
    public function getReportingVoice()
    {
        return $this->container['reporting_voice'];
    }

    /**
     * Sets reporting_voice
     *
     * @param string|null $reporting_voice reporting_voice
     *
     * @return self
     */
    public function setReportingVoice($reporting_voice)
    {
        if (is_null($reporting_voice)) {
            throw new \InvalidArgumentException('non-nullable reporting_voice cannot be null');
        }
        $this->container['reporting_voice'] = $reporting_voice;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \AskNews\Model\AsknewsApiSchemaV1StoriesGraphRelationships
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \AskNews\Model\AsknewsApiSchemaV1StoriesGraphRelationships $relationships relationships
     *
     * @return self
     */
    public function setRelationships($relationships)
    {
        if (is_null($relationships)) {
            throw new \InvalidArgumentException('non-nullable relationships cannot be null');
        }
        $this->container['relationships'] = $relationships;

        return $this;
    }

    /**
     * Gets mermaid
     *
     * @return string
     */
    public function getMermaid()
    {
        return $this->container['mermaid'];
    }

    /**
     * Sets mermaid
     *
     * @param string $mermaid mermaid
     *
     * @return self
     */
    public function setMermaid($mermaid)
    {
        if (is_null($mermaid)) {
            throw new \InvalidArgumentException('non-nullable mermaid cannot be null');
        }
        $this->container['mermaid'] = $mermaid;

        return $this;
    }

    /**
     * Gets cc_image_url
     *
     * @return string
     */
    public function getCcImageUrl()
    {
        return $this->container['cc_image_url'];
    }

    /**
     * Sets cc_image_url
     *
     * @param string $cc_image_url cc_image_url
     *
     * @return self
     */
    public function setCcImageUrl($cc_image_url)
    {
        if (is_null($cc_image_url)) {
            throw new \InvalidArgumentException('non-nullable cc_image_url cannot be null');
        }
        $this->container['cc_image_url'] = $cc_image_url;

        return $this;
    }

    /**
     * Gets display_image_urls
     *
     * @return \AskNews\Model\StoryUpdateDisplayImageUrlsInner[]
     */
    public function getDisplayImageUrls()
    {
        return $this->container['display_image_urls'];
    }

    /**
     * Sets display_image_urls
     *
     * @param \AskNews\Model\StoryUpdateDisplayImageUrlsInner[] $display_image_urls display_image_urls
     *
     * @return self
     */
    public function setDisplayImageUrls($display_image_urls)
    {
        if (is_null($display_image_urls)) {
            throw new \InvalidArgumentException('non-nullable display_image_urls cannot be null');
        }
        $this->container['display_image_urls'] = $display_image_urls;

        return $this;
    }

    /**
     * Gets alignment
     *
     * @return int|null
     */
    public function getAlignment()
    {
        return $this->container['alignment'];
    }

    /**
     * Sets alignment
     *
     * @param int|null $alignment alignment
     *
     * @return self
     */
    public function setAlignment($alignment)
    {
        if (is_null($alignment)) {
            throw new \InvalidArgumentException('non-nullable alignment cannot be null');
        }
        $this->container['alignment'] = $alignment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


